{"version":3,"sources":["../src/Argument.js","../src/Assembler.js","../src/Environment.js","../src/Interpreter.js","../src/Label.js","../src/Operation.js","../src/OperationSet.js","../src/Program.js","../src/Utils.js"],"names":[],"mappings":"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","file":"prgchl.js","sourcesContent":["class Argument {\n    constructor(type, data) {\n        this.type = type;\n        this.data = data;\n    }\n}","class Assembler {\n    static assemble(program, operationSet, success, error) {\n        if (operationSet === undefined)\n            operationSet = OperationSet.getDefaultSet();\n        console.log(operationSet);\n\n        let temporaryOutput = [];\n\n        let lines = program.split(\"\\n\");\n        let chain = [];\n        let labels = [];\n\n        let position = 0;\n\n        for (let lineNumber in lines) {\n            let line = lines[lineNumber];\n\n            //Filter out comments\n            if (line.indexOf(\";\") !== -1) {\n                line = line.replace(line.substring(line.indexOf(\";\")), \"\");\n            }\n\n            if (line === \"\")\n                continue;\n\n            let chunks = line.split(\" \");\n\n            //Label\n            if (AssemblerRegexes[\"label\"].test(lines[lineNumber])) {\n                labels.push(new Label(lines[lineNumber].substring(0, lines[lineNumber].indexOf(\":\")), position));\n                continue;\n            }\n\n            //Operation\n            let argumentList = [];\n            for (let i = 1; i < chunks.length; i++) {\n                console.log(chunks[i]);\n                if (AssemblerRegexes[\"number\"].test(chunks[i])) {\n                    argumentList.push(new Argument(\"number\", parseInt(chunks[i].substr(2), 16)));\n                }\n                else if (AssemblerRegexes[\"address\"].test(chunks[i])) {\n                    argumentList.push(new Argument(\"address\", parseInt(chunks[i].substr(1), 16)));\n                } else if (AssemblerRegexes[\"labelArgument\"].test(chunks[i])) {\n                    argumentList.push(new Argument(\"label\", chunks[i]));\n                }\n            }\n\n            console.log(chunks[0], argumentList, AssemblerRegexes);\n\n            let operation = operationSet.getOperation(chunks[0], argumentList);\n            if (operation !== undefined) {\n                operation.setArguments(argumentList);\n                chain.push(operation);\n                position++;\n            } else {\n                error(\"Unknown operation: \" + chunks[0]);\n            }\n        }\n\n        for (let i in chain) {\n            let operation = chain[i];\n\n            temporaryOutput.push(operation.id);\n\n            for (let j in operation.argumentList) {\n                let argument = operation.argumentList[j];\n\n                switch(argument.type) {\n                    case \"number\":\n                        temporaryOutput.push(argument.data);\n                        continue;\n                    case \"address\":\n                        let address = argument.data;\n                        temporaryOutput.push(address >> 8);\n                        temporaryOutput.push(address & 0xFF);\n                        continue;\n                    case \"label\":\n                        let labelName = argument.data;\n                        let found = false;\n                        for (let k = 0; k < labels.length; k++) {\n                            if (labels[k].name === labelName) {\n                                temporaryOutput.push(labels[k].position >> 8);\n                                temporaryOutput.push(labels[k].position & 0xFF);\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            error(\"Unknown label: \" + labelName);\n                        }\n                        break;\n                }\n            }\n        }\n\n        console.log(temporaryOutput);\n\n        success(new Uint8Array(temporaryOutput));\n    }\n\n    static assembleToProgram(program, settings, metadata, operationSet) {\n        if (settings === undefined)\n            settings = {};\n        if (metadata === undefined)\n            metadata = {};\n\n        return new Program(this.assemble(program, operationSet), settings, metadata);\n    }\n\n    static disassemble(rom, operationSet) {\n        if (operationSet === undefined)\n            operationSet = OperationSet.getDefaultSet();\n    }\n}\n\nconst AssemblerRegexes = {\n    \"number\": /#\\$[0-9A-F]{2}/i,\n    \"address\": /\\$[0-9A-F]{4}/i,\n    \"label\": /(\\w|\\d)+:/i,\n    \"labelArgument\": /(\\w|\\d)+/i\n};","class Environment {\n    constructor() {\n\n    }\n\n    \n}","class Interpreter {\n    constructor() {\n\n    }\n}","class Label {\n    constructor(name, position) {\n        this.name = name;\n        this.position = position;\n    }\n}","class Operation {\n    constructor(id, abbreviation, description, argumentList) {\n        this.id = id;\n        this.abbreviation = abbreviation;\n        this.description = description;\n\n        if (argumentList === undefined)\n            argumentList = [];\n        this.argumentList = argumentList;\n    }\n\n    setArguments(argumentList) {\n        this.argumentList = argumentList;\n    }\n}","class OperationSet {\n    constructor() {\n        this.set = [];\n    }\n\n    addOperation(operation) {\n        this.set[operation.id] = operation;\n    }\n\n    getOperation(abbreviation, argumentList) {\n        for (let i in this.set) {\n            if (this.set[i].abbreviation === abbreviation) {\n                let match = true;\n                for (let j = 0; j < argumentList.length; j++) {\n                    if (this.set[i].argumentList[j] !== argumentList[j].type)\n                        match = false;\n                }\n                if (match)\n                    return this.set[i];\n            }\n        }\n    }\n\n    static getDefaultSet() {\n        let set = new OperationSet();\n        set.addOperation(new Operation(0x00, \"NOP\", \"No Operation\"));\n        set.addOperation(new Operation(0x10, \"LDA\", \"Load value directly to accumulator\", [\"number\"]));\n        set.addOperation(new Operation(0x11, \"LDA\", \"Load from RAM to accumulator\", [\"address\"]));\n        set.addOperation(new Operation(0x20, \"JMP\", \"Jumps to given address\", [\"address\"]));\n        set.addOperation(new Operation(0x20, \"JMP\", \"Jumps to given label\", [\"label\"]));\n        set.addOperation(new Operation(0xFF, \"HLT\", \"Halts execution\"));\n\n        return set;\n    }\n}","class Program {\n    constructor(rom, settings, metadata) {\n        this.rom = rom;\n        this.settings = settings;\n        this.metadata = metadata;\n    }\n\n    static fromByteArray(array) {\n        //TODO: REMOVE THIS THIS IS SUPER TEMPORARY\n        return new Program(array, {}, {});\n    }\n\n    toByteArray() {\n        //TODO: REMOVE THIS THIS IS SUPER TEMPORARY\n        return this.rom;\n    }\n\n    static fromBase64(string) {\n        let characters = atob(string);\n        let temporaryArray = [];\n\n        for (let i in characters) {\n            temporaryArray.push(characters.charCodeAt(i));\n        }\n\n        return Program.fromByteArray(new Uint8Array(temporaryArray));\n    }\n\n    toBase64() {\n        let byteArray = this.toByteArray();\n        let temporaryString = \"\";\n\n        for(let i in byteArray) {\n            temporaryString += String.fromCharCode(byteArray[i]);\n        }\n\n        return btoa(temporaryString)\n    }\n}","function arrayCompare(a, b) {\n    if (a.length !== b.length)\n        return false;\n\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n\n    return true;\n}"]}